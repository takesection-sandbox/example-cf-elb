AWSTemplateFormatVersion: '2010-09-09'
Resources:
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 192.168.1.128/26
      MapPublicIpOnLaunch: false
      VpcId: !ImportValue VpcId
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 192.168.1.192/26
      MapPublicIpOnLaunch: false
      VpcId: !ImportValue VpcId
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !ImportValue RouteTable
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !ImportValue RouteTable
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: example
      VpcId: !ImportValue VpcId
  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !ImportValue SecurityGroupForLoadBalancer
      ToPort: -1
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !ImportValue SecurityGroupForLoadBalancer
      Subnets:
        - !ImportValue PublicSubnet1
        - !ImportValue PublicSubnet2
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /hello
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !ImportValue VpcId
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  ExampleTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Description: ExampleTaskExecutionRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Path: /
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'ecs'
  ExampleTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image:
            Fn::Join:
              - ''
              - - !Ref AWS::AccountId
                - '.dkr.ecr.'
                - !Ref AWS::Region
                - '.amazonaws.com/example:0.1.0-SNAPSHOT'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: example
          MemoryReservation: 1024
          PortMappings:
            - ContainerPort: 8080
          Name: example
      Cpu: 256
      ExecutionRoleArn:
        Fn::GetAtt:
          - ExampleTaskExecutionRole
          - Arn
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
  ECSCluster:
    Type: AWS::ECS::Cluster
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: example
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      TaskDefinition: !Ref ExampleTask
